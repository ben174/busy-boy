{"version":3,"sources":["CalendarGraph.js","App.js","serviceWorker.js","index.js"],"names":["CalendarGraph","props","columns","Array","dateIndex","colors","w","days","d","dates","date","level","off","fillColor","day","class","width","height","x","y","fill","data-level","data-date","format","push","column","transform","AppContainer","paperStyle","margin","padding","classes","makeStyles","theme","root","backgroundColor","useStyles","Container","className","align","Typography","variant","component","gutterBottom","Paper","elevation","style","Divider","AppBar","position","Tabs","aria-label","Tab","label","TabPanel","index","id","Grid","container","spacing","item","xs","Slider","value","dailyContribPercent","onChange","onDailySliderChange","aria-labelledby","weekendContribPercent","onWeekendSliderChange","Button","color","button","startIcon","Icon","App","setOffDays","state","i","downDays","length","downWeekends","setState","handleDailySliderChange","e","val","_","debounce","leading","trailing","drawDebouncedEvent","handleWeekendSliderChange","currDate","moment","startOf","subtract","dateObject","Math","floor","random","console","log","sort","oldArray","keys","this","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0811fff6.chunk.js","sourcesContent":["import * as React from 'react';\n\nfunction CalendarGraph(props) {\n    var columns = Array();\n    var dateIndex = 0;\n    const colors = [\n        '#ebedf0',\n        '#c6e48b',\n        '#7bc96f',\n        '#239a3b',\n        '#196127',\n    ]\n    for (var w=0;w<52;w++) { \n        var days = Array();\n        for (var d=0; d<7; d++) {\n            var {date, level, off} = props.dates[dateIndex];\n            if (off) {\n                level = 0;\n            }\n            var fillColor = colors[level];\n            var day = <rect class=\"day\" width=\"10\" height=\"10\" x={14-w} y={d*13} fill={fillColor} data-level={level} data-date={date.format('MM/DD/YYYY')}></rect>\n            days.push(day);\n            dateIndex++;\n        }\n        var column = <g transform={`translate(${w*14}, 0)`}>{days}</g>\n        columns.push(column)\n    }\n    return (\n        <svg width=\"700\" height=\"112\" class=\"js-calendar-graph-svg\">\n            <g transform=\"translate(0, 20)\">\n                {columns}\n            </g>\n        </svg>\n    );\n}\n\nexport default CalendarGraph;","import Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Slider from '@material-ui/core/Slider';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Icon from '@material-ui/core/Icon';\nimport Button from '@material-ui/core/Button';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Tab, Tabs } from '@material-ui/core';\nimport TabPanel from '@material-ui/lab/TabPanel';\n\n\nimport _ from 'lodash';\nimport moment from 'moment';\nimport * as React from 'react';\nimport './App.css';\nimport CalendarGraph from './CalendarGraph';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    var dates = Array();\n    var downDays = Array();\n    var downWeekends = Array();\n    for (var d = 0; d < 365; d++) {\n      const currDate = moment().startOf('isoWeek').subtract(3, 'days').subtract(d, 'days');\n      var level = Math.floor((Math.random() * 4) + 1);\n\n      const dateObject = {\n        date: currDate,\n        level: level,\n        off: true,\n      }\n      console.log('day');\n      console.log(dateObject.date.day);\n      if (currDate.day() >= 5) {\n        downWeekends.push(d);\n      } else {\n        downDays.push(d);\n      }\n      console.log('pushing date', d, dateObject)\n      dates.push(dateObject);\n    }\n    this.state = {\n      dates: dates,\n      dailyContribPercent: 75,\n      weekendContribPercent: 10,\n      downDays: downDays.sort(() => Math.random() - 0.5),\n      downWeekends: downWeekends.sort(() => Math.random() - 0.5),\n      oldArray: [...Array(365).keys()].sort(() => Math.random() - 0.5),\n    };\n    this.setOffDays();\n  }\n\n  setOffDays = () => {\n    const dates = [...this.state.dates];\n    for (var i = 0; i < this.state.downDays.length; i++) {\n      dates[this.state.downDays[i]].off = !(i < this.state.dailyContribPercent * this.state.downDays.length / 100)\n    }\n    for (var i = 0; i < this.state.downWeekends.length; i++) {\n      dates[this.state.downWeekends[i]].off = !(i < this.state.weekendContribPercent * this.state.downWeekends.length / 100)\n    }\n    this.setState({ dates });\n  }\n\n  handleDailySliderChange = (e, val) => {\n    const drawDebouncedEvent = _.debounce(this.setOffDays, 100, { leading: true, trailing: false });\n    drawDebouncedEvent();\n    this.setState({ dailyContribPercent: val })\n  }\n\n  handleWeekendSliderChange = (e, val) => {\n    const drawDebouncedEvent = _.debounce(this.setOffDays, 100, { leading: true, trailing: false });\n    drawDebouncedEvent();\n    this.setState({ weekendContribPercent: val })\n  }\n\n  render() {\n    return <AppContainer\n      weekendContribPercent={this.state.weekendContribPercent}\n      dailyContribPercent={this.state.dailyContribPercent}\n      dates={this.state.dates}\n      onWeekendSliderChange={this.handleWeekendSliderChange}\n      onDailySliderChange={this.handleDailySliderChange} />\n  }\n}\n\nfunction AppContainer(props) {\n  const marks = [\n    {\n      value: 0,\n      label: 'No Contributions',\n    },\n    {\n      value: 5,\n      label: 'Weight',\n    },\n    {\n      value: 10,\n      label: 'Max Contributions',\n    },\n  ];\n\n  const wrapperStyle = {\n    margin: \"0% 10%\",\n    padding: \"0% 10%\",\n  }\n\n  const paperStyle = {\n    margin: \"1% 10%\",\n    padding: \"0% 10%\",\n\n  }\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n      backgroundColor: '#f5f5f5',\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <Container className={classes.root}>\n      <div align=\"center\">\n        <Typography variant=\"h3\" component=\"h3\">\n          Busy Boy\n        </Typography>\n        <Typography variant=\"h6\" component=\"h6\" gutterBottom>\n          GitHub Contribution Graph Modifier\n        </Typography>\n      </div>\n      <Paper elevation={3} style={paperStyle}>\n        <div style={{ padding: '10px' }}>\n          <p>\n            The GitHub contribution graph is a handy quick glance at the activity of a user on GitHub. But you can easily game it by altering your\n            commit dates. When I learned about this, I created GitDraw to have some fun and allow people to draw pictures in their contribution\n            graph.\n          </p>\n          <p>\n            But as someone who has been a decision maker in the hiring process for quite some time now, I still sometimes find myself biasing at\n            least part of my decision on my first glance at their GitHub contribution graph. If *I* am doing that, I'm quite sure others are too.\n            I consider this a vulnerability in the hiring process. And with vulnerabilities, often times bringing attention to them is what it takes\n            to teach people to not rely on them.\n          </p>\n          <p>\n            So here is a tool which will allow anyone to fudge contribution activity.\n          </p>\n        </div>\n      </Paper>\n      <Paper elevation={3} style={paperStyle}>\n        <CalendarGraph dates={props.dates} />\n        <Divider style={{ margin: '20px 0' }} />\n\n\n\n\n        <AppBar position=\"static\">\n          <Tabs aria-label=\"simple tabs example\">\n            <Tab label=\"Item One\" />\n            <Tab label=\"Item Two\" />\n            <Tab label=\"Item Three\" />\n          </Tabs>\n        </AppBar>\n        <TabPanel index={0}>\n          Item One\n        </TabPanel>\n        <TabPanel index={1}>\n          Item Two\n        </TabPanel>\n        <TabPanel index={2}>\n          Item Three\n        </TabPanel>\n\n\n\n\n\n\n\n\n\n\n\n\n        <Typography id=\"discrete-slider\" variant=\"h6\" component=\"h6\" gutterBottom>\n          Daily Contribution Frequency\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item>\n            Lower\n          </Grid>\n          <Grid item xs>\n            <Slider value={props.dailyContribPercent} onChange={props.onDailySliderChange} aria-labelledby=\"continuous-slider\" />\n          </Grid>\n          <Grid item>\n            Higher\n          </Grid>\n        </Grid>\n        <Typography id=\"discrete-slider\" variant=\"h6\" component=\"h6\" gutterBottom>\n          Weekend Contribution Frequency\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item>\n            Lower\n          </Grid>\n          <Grid item xs>\n            <Slider value={props.weekendContribPercent} onChange={props.onWeekendSliderChange} aria-labelledby=\"continuous-slider\" />\n          </Grid>\n          <Grid item>\n            Higher\n          </Grid>\n        </Grid>\n        <div align=\"right\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.button}\n            startIcon={<Icon>get_app</Icon>}\n            style={{ margin: '20px 0' }}\n          >\n            Download Script\n        </Button>\n        </div>\n      </Paper>\n    </Container>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}